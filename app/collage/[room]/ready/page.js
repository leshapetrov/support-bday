'use client'

import { useState, useEffect } from 'react'
import { useRouter, useParams } from 'next/navigation'
import Logo from '../../../../components/Logo'
import Confetti from '../../../../components/Confetti'


export default function ReadyPage() {
  const router = useRouter()
  const params = useParams()
  const [room, setRoom] = useState(null)
  const [image, setImage] = useState(null)
  const [mounted, setMounted] = useState(false)
  const [collageImages, setCollageImages] = useState([])
  const [isCreatingCollage, setIsCreatingCollage] = useState(false)

  useEffect(() => {
    setMounted(true)
    if (params.room) {
      setRoom(params.room)
    } else {
      router.push('/')
      return
    }

    if (typeof window !== 'undefined') {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç–µ
      const allUserPhotos = getAllUserPhotos()
      
      if (allUserPhotos.length > 0) {
        setCollageImages(allUserPhotos)
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–∞–∂ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        createCollageFromImages(allUserPhotos)
      } else {
        // –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–µ–µ —Ñ–æ—Ç–æ –≤ sessionStorage
        const photo = sessionStorage.getItem('photo')
        if (photo) {
          setCollageImages([photo])
          createCollageFromImages([photo])
        }
      }
    }
  }, [params.room, router])

  // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
  const getUniqueUserCount = () => {
    if (typeof window === 'undefined') return 0
    
    const room = params.room
    let userCount = 0
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏ –≤ localStorage –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key && key.startsWith(`userPhoto_${room}_`)) {
        userCount++
      }
    }
    
    return userCount
  }

  // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–º–Ω–∞—Ç–µ
  const getAllUserPhotos = () => {
    if (typeof window === 'undefined') return []
    
    const room = params.room
    const photos = []
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —ç—Ç–æ–π –∫–æ–º–Ω–∞—Ç—ã
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i)
      if (key && key.startsWith(`userPhoto_${room}_`)) {
        const photoData = localStorage.getItem(key)
        if (photoData) {
          photos.push(photoData)
        }
      }
    }
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ –≤ –∫–æ–º–Ω–∞—Ç–µ ${room}`)
    console.log('üì∏ –ö–ª—é—á–∏ —Ñ–æ—Ç–æ:', Array.from({length: localStorage.length}, (_, i) => localStorage.key(i)).filter(key => key && key.startsWith(`userPhoto_${room}_`)))
    
    return photos
  }

  const createCollageFromImages = async (images) => {
    if (images.length === 0) return
    
    setIsCreatingCollage(true)
    
    try {
      // –°–æ–∑–¥–∞–µ–º canvas –¥–ª—è –∫–æ–ª–ª–∞–∂–∞
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–ª–ª–∞–∂–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
      const { cols, rows } = getCollageDimensions(images.length)
      
      // –î–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª—å—à–∏–π —Ä–∞–∑–º–µ—Ä
      const cellWidth = images.length === 1 ? 800 : 400
      const cellHeight = images.length === 1 ? 600 : 300
      canvas.width = cols * cellWidth
      canvas.height = rows * cellHeight
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Ä–∏—Å—É–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const promises = images.map((imgSrc, index) => {
        return new Promise((resolve) => {
          const img = new Image()
          img.onload = () => {
            const col = index % cols
            const row = Math.floor(index / cols)
            const x = col * cellWidth
            const y = row * cellHeight
            
            // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—Å–µ–π —è—á–µ–π–∫–∏
            const scale = Math.max(cellWidth / img.width, cellHeight / img.height)
            const scaledWidth = img.width * scale
            const scaledHeight = img.height * scale
            const offsetX = (cellWidth - scaledWidth) / 2
            const offsetY = (cellHeight - scaledHeight) / 2
            
            // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ctx.save()
            ctx.beginPath()
            ctx.rect(x, y, cellWidth, cellHeight)
            ctx.clip()
            ctx.drawImage(img, x + offsetX, y + offsetY, scaledWidth, scaledHeight)
            ctx.restore()
            resolve()
          }
          img.onerror = () => {
            // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, —Ä–∏—Å—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            ctx.fillStyle = '#FFCE00'
            ctx.fillRect(index % cols * cellWidth, Math.floor(index / cols) * cellHeight, cellWidth, cellHeight)
            ctx.fillStyle = '#000000'
            ctx.font = '24px "Tilda Sans"'
            ctx.textAlign = 'center'
            ctx.fillText('–§–æ—Ç–æ', index % cols * cellWidth + cellWidth / 2, Math.floor(index / cols) * cellHeight + cellHeight / 2)
            resolve()
          }
          img.src = imgSrc
        })
      })
      
      await Promise.all(promises)
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      const collageDataUrl = canvas.toDataURL('image/jpeg', 0.9)
      sessionStorage.setItem('finalCollage', collageDataUrl)
      setImage(collageDataUrl)
      
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–ª–ª–∞–∂–∞:', error)
    } finally {
      setIsCreatingCollage(false)
    }
  }

  const addMorePhotos = () => {
    router.push(`/collage/${room}`)
  }

  const downloadCollage = () => {
    if (!image) return
    
    const link = document.createElement('a')
    link.download = `collage-${room}.jpg`
    link.href = image
    link.click()
  }

  const shareCollage = async () => {
    if (!image) return
    
    try {
      if (navigator.share) {
        await navigator.share({
          title: '–ù–∞—à –∫–æ–ª–ª–∞–∂',
          text: '–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞—à –∫–æ–ª–ª–∞–∂!',
          url: window.location.href
        })
      } else {
        await navigator.clipboard.writeText(window.location.href)
        alert('–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–ª–ª–∞–∂ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!')
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —à–∞—Ä–∏–Ω–≥–∞:', error)
    }
  }

  const getCollageDimensions = (imageCount) => {
    let cols, rows
    if (imageCount === 1) {
      cols = 1
      rows = 1
    } else if (imageCount <= 2) {
      cols = 2
      rows = 1
    } else if (imageCount <= 4) {
      cols = 2
      rows = 2
    } else if (imageCount <= 6) {
      cols = 3
      rows = 2
    } else {
      cols = 3
      rows = 3
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (—à–∏—Ä–∏–Ω–∞ / –≤—ã—Å–æ—Ç–∞)
    return { cols, rows, aspectRatio: cols / rows }
  }

  const getCollageStyle = () => {
    return {
      width: '100%'
    }
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–ª–ª–∞–∂–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ç–æ
  const getCollageImageStyle = () => {
    const photoCount = getUniqueUserCount()
    if (photoCount === 1) {
      return {
        width: '100%',
        maxWidth: '800px',
        height: 'auto'
      }
    }
    return {
      width: '100%',
      height: 'auto'
    }
  }

  if (!mounted || !room) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-black">
        <div className="text-white">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    )
  }

  return (
    <div className="container-main">
      <Confetti />
      <div className="container-content">
        <Logo className="logo" />
        
        <div className="text-white text-6xl mb-8">
          √ó
        </div>
        
        <div className="collage-container">
          {isCreatingCollage ? (
            <div className="collage-inner" style={getCollageStyle()}>
              <div className="text-center">
                <div className="loading-spinner mx-auto mb-4"></div>
                <p className="text-small">–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–∞–∂–∞...</p>
              </div>
            </div>
          ) : image ? (
            <div className="collage-inner" style={getCollageStyle()}>
              <img 
                src={image} 
                alt="–ì–æ—Ç–æ–≤—ã–π –∫–æ–ª–ª–∞–∂" 
                className="collage-image"
                style={getCollageImageStyle()}
              />
            </div>
          ) : (
            <div className="collage-inner" style={getCollageStyle()}>
              <p className="text-small">–ö–æ–ª–ª–∞–∂ –±—É–¥–µ—Ç –∑–¥–µ—Å—å!</p>
            </div>
          )}
        </div>
        
        <h1 className="title-large">
          –í–º–µ—Å—Ç–µ –≤ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã!
        </h1>
        
        <div className="status">
          <p className="text-small mb-1">–í –∫–æ–ª–ª–∞–∂–µ</p>
          <p className="text-small">{getUniqueUserCount()} —Ñ–æ—Ç–æ</p>
        </div>
        
        <div className="button-group">
          <div className="button-group-secondary">
            <button
              onClick={addMorePhotos}
              className="btn-secondary flex-1"
            >
              –ø–µ—Ä–µ—Å–Ω—è—Ç—å —Å–≤–æ–µ —Ñ–æ—Ç–æ
            </button>
            
            {image && !isCreatingCollage && (
              <button
                onClick={downloadCollage}
                className="btn-secondary flex-1"
              >
                —Å–∫–∞—á–∞—Ç—å –∫–æ–ª–ª–∞–∂
              </button>
            )}
          </div>
          
          <button
            onClick={shareCollage}
            className="btn-main"
          >
            –ø–æ–¥–µ–ª–∏—Ç—å—Å—è
          </button>
        </div>
      </div>
    </div>
  )
} 